<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<!-- 定义受环境影响易变的变量 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:/db.properties</value>
			</list>
		</property>
	</bean>

	<!-- dataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName">
			<value>${db.driverClassName}</value>
		</property>
		<property name="url">
			<value>${db.url}</value>
		</property>
		<property name="username">
			<value>${db.username}</value>
		</property>
		<property name="password">
			<value>${db.password}</value>
		</property>
		<property name="maxWait" value="${db.maxWait}" />
		<!-- 连接初始值，连接池启动时创建的连接数量的初始值 -->
		<property name="initialSize" value="${db.initialSize}" />
		<!-- 连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制 -->
		<property name="maxActive" value="${db.maxActive}" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制 -->
		<property name="maxIdle" value="${db.maxIdle}" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="${db.minIdle}" />
		<!-- 是否对已备语句进行池管理（布尔值），是否对PreparedStatement进行缓存 -->
		<property name="poolPreparedStatements" value="true" />
		<!-- 是否对sql进行自动提交 -->
		<property name="defaultAutoCommit" value="true" />
	</bean>

	<!-- Spring SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 加入数据源之后，hibernate配置文件可以去掉，
			其中数据库连接交给数据源处理 
			hibernate的属性配置交给Spring在该位置进行配置
			hibernate的映射文件交给Spring在该位置进行配置
		<property name="configLocation"
			value="classpath:hibernate.cfg.xml">
		</property>
		-->
		<property name="dataSource" ref="dataSource"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<prop key="hibernate.hbm2ddl.auto">false</prop>
			</props>
		</property>
		<!-- Spring由加载每个映射文件优化成加载整个映射目录
		<property name="mappingResources">
			<list>
				<value>cn/zr/entity/Dept.hbm.xml</value>
				<value>cn/zr/entity/Emp.hbm.xml</value>
			</list>
		</property>
		 -->
		 <property name="mappingDirectoryLocations">
		 	<!-- 这里加载映射文件，使用的/作为分隔符 -->
		 	<value>classpath:cn/zr/entity/</value>
		 </property>
	</bean>
	
	<!-- Spring事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 注解事务
	<tx:annotation-driven transaction-manager="transactionManager" />
	 -->
	 
	<!-- 声明式事务 -->
	<!-- 事务管理器的规则 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 对get/load/search开头的方法要求只读事务 -->
			<tx:method name="get*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="search*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<!-- 对其它方法要求事务处理提交 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
			<!-- 关于事务回滚的问题:
				由于Spring与Hibernate类型的Dao已经整合,所以在面向切面编程的过程中
				只有当Spring感知到异常以后才能被切面拦截,并执行回滚操作,而实际情况是
				我们往往需要拦截一些继承runtimeException的异常转而编程Exception的
				异常,然而这个恰恰违反了Spring只能拦截runtimeException的初衷,因此
				我们必须在配置文件中明确指定,拦截到哪种异常Spring需要做回滚操作
				rollback-for的作用就是明确指定需要回滚的拦截异常名
			<tx:method name="*" propagation="REQUIRED" rollback-for="DBLinkException"/>
			-->
		</tx:attributes>
	</tx:advice>
	<!-- 事务切面 -->
	<aop:config>
		<!-- 切入点 -->
		<!-- execution表达式:(modifies-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?) -->
		<!-- 公共的方法，任意返回值，无声明类型，cn.zr.dao包下及子目录下任意类的任意方法(参数无限制) -->
		<aop:pointcut id="txPointcut"
			expression="execution(public * cn.zr.service..*.*(..))" />
		<!-- 切入点/增强类 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
	<!-- 加载其他分配置文件时，可通过如下的import导入，也可以通过容器参数动态加载
	<import resource="applicationContext-dao.xml"/>
	<import resource="applicationContext-service.xml"/>
	<import resource="applicationContext-action.xml"/>
	 -->
	
</beans>






